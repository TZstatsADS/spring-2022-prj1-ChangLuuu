empiricalsize <- sim$rejection.rate
empiricalsize
hist(sim$pvalue.list)
hist(sim$pvalue.list, prob=T)
hist(sim$statistic.list,probabilit=TRUE)
hist(sim$statistic.list,probabilit=TRUE)
x <- seq(-4,4,0.01)
lines(x, dnorm(x))
hist(sim$statistic.list, probabilit=TRUE, breaks = 100, ylim = c(0,0.5))
x <- seq(-4,4,0.01)
lines(x, dnorm(x))
hist(sim$statistic.list, probabilit=TRUE, breaks = 50, ylim = c(0,0.5))
x <- seq(-4,4,0.01)
lines(x, dnorm(x))
t.test.sim(R=1000,mu1=10,mu2=10,sigma1=5,sigma2=5)$rejection.rate
t.test.sim(R=1000,mu1=10,mu2=12,sigma1=5,sigma2=5)$rejection.rate
t.test.sim(R=1000,mu1=10,mu2=14,sigma1=5,sigma2=5)$rejection.rate
t.test.sim(R=1000,mu1=10,mu2=16,sigma1=5,sigma2=5)$rejection.rate
t.test.sim(R=10000,mu1=10,mu2=12,sigma1=10,sigma2=10,m=10,n=10)$rejection.rate
t.test.sim(R=10000,mu1=10,mu2=12,sigma1=10,sigma2=10,m=30,n=30)$rejection.rate
t.test.sim(R=10000,mu1=10,mu2=12,sigma1=10,sigma2=10,m=50,n=50)$rejection.rate
t.test.sim(R=10000,mu1=10,mu2=12,sigma1=10,sigma2=10,m=100,n=100)$rejection.rate**
t.test.sim(R=10000,mu1=10,mu2=12,sigma1=10,sigma2=10,m=10,n=10)$rejection.rate
t.test.sim(R=10000,mu1=10,mu2=12,sigma1=10,sigma2=10,m=30,n=30)$rejection.rate
t.test.sim(R=10000,mu1=10,mu2=12,sigma1=10,sigma2=10,m=50,n=50)$rejection.rate
t.test.sim(R=10000,mu1=10,mu2=12,sigma1=10,sigma2=10,m=100,n=100)$rejection.rate
?rt()
t.test.sim2 <- function(R=10000,df1=5,df2=10,m=30,n=30,level=.05,value=0,direction="Two") {
#Define empty lists
statistic.list <- rep(0,R)
pvalue.list <- rep(0,R)
for (i in 1:R) {
Control <- rt(m,df1)
Dosage <- rt(m,df2)
# Testing values
testing.procedure <- t.test(Control,Dosage)
statistic.list[i] <- testing.procedure$statistic
pvalue.list[i] <- testing.procedure$p.value
}
rejection.rate <- mean(pvalue.list<0.05)
return(list(statistic.list=statistic.list,pvalue.list=pvalue.list,rejection.rate=rejection.rate))
}
t.test.sim2(R=10)
t.test.sim2 <- function(R=10000,df1=5,df2=10,ncp1=2,ncp2=4,
m=30,n=30,level=.05,value=0,direction="Two") {
#Define empty lists
statistic.list <- rep(0,R)
pvalue.list <- rep(0,R)
for (i in 1:R) {
Control <- rt(m,df1,ncp1)
Dosage <- rt(m,df2,ncp2)
# Testing values
testing.procedure <- t.test(Control,Dosage)
statistic.list[i] <- testing.procedure$statistic
pvalue.list[i] <- testing.procedure$p.value
}
rejection.rate <- mean(pvalue.list<0.05)
return(list(statistic.list=statistic.list,pvalue.list=pvalue.list,rejection.rate=rejection.rate))
}
t.test.sim2(R=10)
t.test.sim2 <- function(R=10000,df1=5,df2=10,ncp1=2,ncp2=4,
m=30,n=30,level=.05,value=0,direction="Two") {
#Define empty lists
statistic.list <- rep(0,R)
pvalue.list <- rep(0,R)
for (i in 1:R) {
Control <- rt(m,df1,ncp1)
Dosage <- rt(m,df2,ncp2)
# Testing values
testing.procedure <- t.test(Control,Dosage)
statistic.list[i] <- testing.procedure$statistic
pvalue.list[i] <- testing.procedure$p.value
}
rejection.rate <- mean(pvalue.list<0.05)
return(list(statistic.list=statistic.list,pvalue.list=pvalue.list,rejection.rate=rejection.rate))
}
t.test.sim2(R=10000)
t.test.sim2 <- function(R=10000,df1=5,df2=10,ncp1=2,ncp2=4,
m=30,n=30,level=.05,value=0,direction="Two") {
#Define empty lists
statistic.list <- rep(0,R)
pvalue.list <- rep(0,R)
for (i in 1:R) {
Control <- rt(m,df1,ncp1)
Dosage <- rt(m,df2,ncp2)
# Testing values
testing.procedure <- t.test(Control,Dosage)
statistic.list[i] <- testing.procedure$statistic
pvalue.list[i] <- testing.procedure$p.value
}
rejection.rate <- mean(pvalue.list<0.05)
return(list(statistic.list=statistic.list,pvalue.list=pvalue.list,rejection.rate=rejection.rate))
}
t.test.sim2(df1=5,df2=10,ncp1=2,ncp2=2)$rejection.rate
t.test.sim2(df1=5,df2=10,ncp1=2,ncp2=3)$rejection.rate
t.test.sim2(df1=5,df2=10,ncp1=2,ncp2=4)$rejection.rate
t.test.sim2(df1=5,df2=10,ncp1=2,ncp2=5)$rejection.rate
t.test.sim2(df1=5,df2=5,ncp1=2,ncp2=2)$rejection.rate
t.test.sim2(df1=5,df2=10,ncp1=2,ncp2=2)$rejection.rate
t.test.sim2(df1=5,df2=15,ncp1=2,ncp2=2)$rejection.rate
t.test.sim2(df1=5,df2=20,ncp1=2,ncp2=2)$rejection.rate
t.test.sim2(df1=5,df2=5,ncp1=2,ncp2=2)$rejection.rate
t.test.sim2(df1=5,df2=5,ncp1=2,ncp2=3)$rejection.rate
t.test.sim2(df1=5,df2=5,ncp1=2,ncp2=4)$rejection.rate
t.test.sim2(df1=5,df2=5,ncp1=2,ncp2=5)$rejection.rate
cauchy.sim <- function(n){
u <- runif(n,0,1)
return(tan(pi*(u-1/2)))
}
cauchy.sim(10)
cauchy.draws <- cauchy.sim(1000)
hist(cauchy.draws, prob = T, xlab = "x", xlim = c(-10,10), ylim = c(0,0.35), breaks = 3000)
x <- seq(-10, 10, 0.01)
lines(x, (1/pi)*(1/(1+x^2)))
cauchy.draws <- cauchy.sim(1000)
hist(cauchy.draws, prob = T, xlab = "x", xlim = c(-10,10), ylim = c(0,0.35), breaks = 3000)
x <- seq(-10, 10, 0.01)
lines(x, (1/pi)*(1/(1+x^2)))
set.seed(0)
cauchy.sim <- function(n){
u <- runif(n,0,1)
return(tan(pi*(u-1/2)))
}
cauchy.sim(10)
cauchy.draws <- cauchy.sim(1000)
hist(cauchy.draws, prob = T, xlab = "x", xlim = c(-10,10), ylim = c(0,0.35), breaks = 3000)
x <- seq(-10, 10, 0.01)
lines(x, (1/pi)*(1/(1+x^2)))
set.seed(0)
cauchy.sim <- function(n){
u <- runif(n,0,1)
return(tan(pi*(u-1/2)))
}
cauchy.sim(10)
cauchy.draws <- cauchy.sim(1000)
hist(cauchy.draws, prob = T, xlab = "x", xlim = c(-10,10), ylim = c(0,0.35), breaks = 3000)
x <- seq(-10, 10, 0.01)
lines(x, (1/pi)*(1/(1+x^2)))
set.seed(0)
cauchy.sim <- function(n){
u <- runif(n,0,1)
return(tan(pi*(u-1/2)))
}
cauchy.sim(10)
cauchy.draws <- cauchy.sim(1000)
hist(cauchy.draws, prob = T, xlab = "x", xlim = c(-10,10), ylim = c(0,0.35), breaks = 5000)
x <- seq(-10, 10, 0.01)
lines(x, (1/pi)*(1/(1+x^2)))
set.seed(0)
cauchy.sim <- function(n){
u <- runif(n,0,1)
return(tan(pi*(u-1/2)))
}
cauchy.sim(10)
cauchy.draws <- cauchy.sim(1000)
hist(cauchy.draws, prob = T, xlab = "x", xlim = c(-10,10), ylim = c(0,0.35), breaks = 10000)
x <- seq(-10, 10, 0.01)
lines(x, (1/pi)*(1/(1+x^2)))
normal.sim <- function(n){
nsamp <- n
ncount <- 0
sim <- rep(NA, nsamp)
while(ncount<nsamp){
x <- tan(pi*(runif(1,0,1)-1/2))
u <- runif(1)
if(u<f(x)/e(x,alpha)){
ncount <- ncount+1
sim[ncount] <- x
}
}
return(sim)
}
normal.sim(10)
knitr::opts_chunk$set(echo = TRUE)
f <- function(x) {
out <- ifelse(x<1,0,2/x^3)
return(out)
}
x.plot <- seq(-1,15,length=1000)
plot(x.plot,f(x.plot),type="l",ylim=c(-.2,2.2),xlab="x",ylab="f(x)")
abline(h=0,lty=2)
set.seed(1)
F <- function(x){
return(ifelse(x<1,0,1-1/x^2))
}
plot(x.plot, F(x.plot), type="l", ylim=c(0,1), xlab="x", ylab="F(x)")
n <- 10000
u <- runif(n,0,1)
Finverse <- function(u){return(sqrt(1/(1-u)))}
x <- Finverse(u)
hist(x, xlim = c(0,15), ylim = c(0,2.2), breaks = 500, prob = T)
lines(x.plot, f(x.plot), col="blue")
plot(ecdf(x), xlim = c(0,15), main="empirical CDF of x")
f <- function(x){
return(ifelse(x>3*pi/2 & x<5*pi/2, 3*cos(x)*sin(x)^2/2, 0))
}
f(2*pi)
f(7)
x.plot <- seq(3,10,length=1000)
plot(x.plot, f(x.plot), type = "l", xlab = "x", ylab = "f(x)")
goverp <- function(x){return(3*pi*cos(x)*sin(x)^2/2)}
mean(goverp(runif(1000000,3*pi/2,5*pi/2)))
f.max <- max(f(x.plot))
e <- function(x){return(f.max+0.1)}
n.samp <- 10000
n <- 0
samps <- rep(NA,n.samp)
while(n<n.samp){
y <- runif(1,3*pi/2,5*pi/2)
u <- runif(1)
if(u<f(y)/e(y)){
n <- n+1
samps[n] <- y
}
}
hist(samps, prob = T, xlab = "x", ylab = "f(x)", main = "Histogram of f(x)", breaks = 100)
lines(x.plot, f(x.plot), col="blue")
set.seed(2)
my_AR1 <- function(n,phi,sigma,e1=0){
epsilon <- rep(NA,n)
epsilon[1] <- e1
for(i in 2:n){
epsilon[i] <- phi*epsilon[i-1]+rnorm(1, mean = 0, sd = sigma)
}
return(epsilon)
}
AR1 <- my_AR1(n=150,phi=.9,sigma=2,e1=0)
x.plot <- seq(1,150)
plot(x.plot, AR1, type = "l", xlab = "time", ylab = "AR(1)")
L.AR1 <- function(theta,ts_data){
L <- prod(dnorm(ts_data[2:length(ts_data)], mean = theta[2]*ts_data[1:length(ts_data)-1],
sd = sqrt(theta[1]), log = FALSE))*dnorm(ts_data[1], mean = 0,
sd = sqrt(theta[1]/(1-theta[2]^2)), log = FALSE)
return(L)
}
AR1_sim <- AR1
L.AR1(theta=c(5,0.9),ts_data=AR1_sim)
neg.ll.AR1 <- function(theta,ts_data){
neg.ll <- -(sum(dnorm(ts_data[2:length(ts_data)], mean = theta[2]*ts_data[1:length(ts_data)-1],
sd = sqrt(theta[1]), log = TRUE)) + dnorm(ts_data[1], mean = 0,
sd = sqrt(theta[1]/(1-theta[2]^2)), log = TRUE))
return(neg.ll)
}
neg.ll.AR1(theta=c(5,.9),ts_data=AR1_sim)
AR <- AR1_sim-mean(AR1_sim)
MLE <- nlm(neg.ll.AR1, p = c(5,.9), ts_data = AR)
c(sqrt(MLE$estimate[1]),2)
c(MLE$estimate[2],0.9)
c(sd(AR1_sim)^2,MLE$estimate[1]/(1-MLE$estimate[2]^2))
BA <- read.csv("BA.csv")
dim(BA)
close_data <- read.csv("close_data.csv")
dim(close_data)
names(close_data)
df_AXP <- close_data[close_data$ticker=="AXP",]
head(df_AXP)
dim(df_AXP)
compute_return <- function(df){
rt <- rep(NA,209)
for(i in 1:209){
rt[i] <- (df$close[i+1]-df$close[i])/df$close[i]
}
df <- df[1:209,]
df$return <- rt
return(df)
}
newdf_AXP <- compute_return(df_AXP)
head(newdf_AXP)
dim(newdf_AXP)
BA_new <- compute_return(BA)
head(BA_new)
dim(BA_new)
library("plyr")
close_data_new <- ddply(close_data,.(ticker),compute_return)
dim(close_data_new)
#(var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y))
alpha_hat <- (var(BA_new$return)-cov(newdf_AXP$return,BA_new$return))/(var(newdf_AXP$return)+var(BA_new$return)-2*cov(newdf_AXP$return,BA_new$return))
alpha_hat
1-alpha_hat
BA_relationships <- function(ticker,BA=BA_new,data=close_data_new){
df <- data[data$ticker==ticker,]
samplecor <- cor(BA$return,df$return)
alpha_hat <- (var(BA$return)-cov(df$return,BA$return))/(var(df$return)+var(BA$return)-2*cov(df$return,BA$return))
return(c(samplecor,alpha_hat))
}
BA_relationships("AXP", BA_new, close_data_new)
data.split <- split(close_data_new,close_data_new$ticker)
estdf <- data.frame(cor=c(),alpha=c())
for(i in 1:length(names(data.split))){
estdf[i,"cor"] <- BA_relationships(ticker = names(data.split)[i])[1]
estdf[i,"alpha"] <- BA_relationships(ticker = names(data.split)[i])[2]
}
rownames(estdf) <- names(data.split)
estdf <- estdf[order(estdf$cor, decreasing = T),]
head(estdf)
dim(estdf)
# Define Y
Y <- BA$close
# Define X
GS_data <- close_data[close_data$ticker=="GS",]
X <- GS_data$close
# Run linear model
model <- lm(Y~X)
# Plot Y versus X
plot(X,Y,xlab="GS closing price",ylab="BA closing price")
abline(model,col="red")
# define residuals
res <- residuals(model)
# Display coefficients
model$coefficients
# Plot residuals
plot(res,type="l",main="Residuals of lm(BA~GS)")
MLEres <- nlm(neg.ll.AR1, p = c(5,.9), ts_data = res)
MLEres$estimate
set.seed(15)
sigma21 <- rgamma(1, shape = 5, scale = 4)
phi1 <- runif(1)
n.samp <- 100000
theta <- data.frame(sigma2=rep(NA,n.samp+1), phi=rep(NA,n.samp+1))
theta[1,"sigma2"]=sigma21
theta[1,"phi"]=phi1
theta_star <- rep(NA,2)
theta_t <- rep(NA,2)
for(t in 1:n.samp){
theta_star[1] <- rgamma(1, shape = 5, scale = 4)
theta_star[2] <- runif(1)
theta_t[1] <- theta[t,1]
theta_t[2] <- theta[t,2]
MH_ratio <- L.AR1(theta_star,res)/L.AR1(theta_t,res)
prob_vec <- c(min(MH_ratio,1),1-min(MH_ratio,1))
theta[t+1,1] <- sample(c(theta_star[1], theta_t[1]), 1, prob = prob_vec)
theta[t+1,2] <- sample(c(theta_star[2], theta_t[2]), 1, prob = prob_vec)
}
theta <- theta[(n.samp*0.2+2):nrow(theta),]
dim(theta)
par(mfrow=c(2,2))
hist(theta[,1], breaks = 100, main = "Histogram of sigma square", prob = T, xlab = "sigma square")
hist(theta[,2],breaks = 100, main = "Histogram of phi", prob = T, xlab = "phi")
x.plot <- (n.samp*0.2+2):(n.samp+1)
plot(x.plot, theta[,1], main = "traceplot of sigma square", type = "l", xlab = "time", ylab = "sigma square")
plot(x.plot, theta[,2], main = "traceplot of phi", type = "l",xlab = "time", ylab = "phi")
sigma2est <- mean(theta[,1])
phiest <- mean(theta[,2])
c(sigma2est,phiest)
pred_data <- read.csv("Pred_BA_GS.csv")
#dim(pred_data)
Y_test <- pred_data$BA
X_test <- pred_data$GS
plot(X_test,Y_test,xlab="GS closing price",ylab="BA closing price",main="Prediciton Set")
#(1)
beta <- model$coefficients
Y_pred <- beta[1]+beta[2]*X_test
#(2)
res_pred <- Y_test - Y_pred
#(3)
Y_forecast <- rep(NA,31)
Y_forecast[1] <- Y_pred[1]+phiest*res[length(res)]
for(t in 2:31){
Y_forecast[t] <- Y_pred[t]+phiest*res_pred[t-1]
}
#(4)
MSE <- mean((Y_forecast-Y_test)^2)
c(MSE,sigma2est)
x.plot <- seq(1:31)
plot(x.plot,Y_forecast,col="black",type="l", ylim = c(185,240), xlab = "time", ylab = "BA", lty=1)
lines(x.plot,Y_test,col="blue", lty=2)
legend("bottomleft", c("Y_forecast","Y_test"), lty=c(1, 2), col=c("black", "blue"))
plot(x.plot,Y_test)
lines(x.plot,Y_forecast)
plot(x.plot,Y_test,type = "l")
lines(x.plot,Y_forecast)
plot(x.plot,Y_test,type = "l")
lines(x.plot,Y_pred)
View(close_data)
View(BA)
View(pred_data)
#(1)
beta <- model$coefficients
Y_pred <- beta[1]+beta[2]*X_test
#(2)
res_pred <- Y_test - Y_pred
#(3)
Y_forecast <- rep(NA,31)
Y_forecast[1] <- Y_pred[1]+phiest*res[length(res)]
for(t in 2:31){
Y_forecast[t] <- Y_pred[t]+phiest*res_pred[t-1]+rnorm(1,0,sqrt(sigma2est))
}
#(4)
MSE <- mean((Y_forecast-Y_test)^2)
c(MSE,sigma2est)
x.plot <- seq(1:31)
plot(x.plot,Y_forecast,col="black",type="l", ylim = c(185,240), xlab = "time", ylab = "BA", lty=1)
lines(x.plot,Y_test,col="blue", lty=2)
legend("bottomleft", c("Y_forecast","Y_test"), lty=c(1, 2), col=c("black", "blue"))
clc
rm(list=ls())
remove(list=ls())
packages.used=c("rvest", "tibble",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels","readtext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
library("readtext")
print(R.version)
rawdata <- read.csv("data/philosophy_data.csv")
rawdata <- read.csv("../data/philosophy_data.csv")
setwd(~/Desktop/22spring/GR5243 Applied DS/spring-2022-prj1-ChangLuuu/)
setwd(~/Desktop/22spring/GR5243 Applied DS/spring-2022-prj1-ChangLuuu)
setwd("~/Desktop/22spring/GR5243 Applied DS/spring-2022-prj1-ChangLuuu")
rawdata <- read.csv("../data/philosophy_data.csv")
rawdata <- read.csv("~/data/philosophy_data.csv")
rawdata <- read.csv("~/Desktop/22spring/GR5243 Applied DS/spring-2022-prj1-ChangLuuu/data/philosophy_data.csv")
head(rawdata,5)
colnames(rawdata)
#unique(rawdata$title)
unique(rawdata$author)
unique(rawdata$school)
sentenceCorpus <- Corpus(VectorSource(rawdata$sentence_lowered))
sentenceCorpus<-tm_map(sentenceCorpus, removeWords, stopwords("english"))
sentenceCorpus<-tm_map(sentenceCorpus, removeWords, character(0))
sentenceCorpus<-tm_map(sentenceCorpus, removePunctuation)
sentenceCorpus<-tm_map(sentenceCorpus, stripWhitespace)
tdm <- TermDocumentMatrix(sentenceCorpus)
tdm = removeSparseTerms(tdm, 0.99)
tdm.tidy = tidytext::tidy(tdm)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
tdm.overall
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(2,1),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
remove(list=ls())
packages.used=c("rvest", "tibble",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels","readtext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
library("readtext")
print(R.version)
rawdata <- read.csv("~/Desktop/22spring/GR5243 Applied DS/spring-2022-prj1-ChangLuuu/data/philosophy_data.csv")
head(rawdata,5)
colnames(rawdata)
#unique(rawdata$title)
unique(rawdata$author)
unique(rawdata$school)
sentenceCorpus <- Corpus(VectorSource(rawdata$sentence_lowered))
sentenceCorpus<-tm_map(sentenceCorpus, removeWords, stopwords("english"))
sentenceCorpus<-tm_map(sentenceCorpus, removeWords, character(0))
sentenceCorpus<-tm_map(sentenceCorpus, removePunctuation)
sentenceCorpus<-tm_map(sentenceCorpus, stripWhitespace)
tdm <- TermDocumentMatrix(sentenceCorpus)
tdm = removeSparseTerms(tdm, 0.99)
tdm.tidy = tidytext::tidy(tdm)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
tdm.overall
s <- Sys.time()
emotions=get_nrc_sentiment(rawdata$sentence_lowered[1:50])
emotions
e <- Sys.time()
e-s
emotions
emotions[1,1]
